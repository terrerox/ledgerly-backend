name: Deploy 🚀

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: ⚙️ Setup .NET 8 SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.x
      - name: 📦 Restore Dependencies
        run: dotnet restore ./src/Ledgerly/Ledgerly.csproj
      - name: 🏗️ Build Project
        run: dotnet build ./src/Ledgerly/Ledgerly.csproj --no-restore
      - name: ✅ Run Tests
        run: dotnet test ./src/Ledgerly/Ledgerly.csproj --no-build --verbosity normal
  publish:
    needs: build
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: 🔑 Login to Amazon ECR
        run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ secrets.REPOSITORY }}

      - name: 📦 Build and Push Docker Image
        run: |
          docker build -f ./src/Ledgerly/Dockerfile -t ${{ secrets.REPOSITORY }} -t ${{ secrets.REPOSITORY }}:latest .
          docker image ls
          docker push --all-tags ${{ secrets.REPOSITORY }}
  deploy:
    needs: publish
    runs-on: ubuntu-latest
    steps:
      - name: 🛠️ Checkout Repository
        uses: actions/checkout@v4
      - name: 📂 List devops directory
        run: ls -la ./
      - name: 🛠️ Install gettext
        run: sudo apt-get update && sudo apt-get install -y gettext
      - name: 🚀 Deploy to Elastic Beanstalk
        env:
          APP_NAME: ledgerly
          APP_ENV_NAME: production
          APP_VERSION: latest
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          # Process template files
          envsubst < ./devops/Dockerrun.aws.json > ./Dockerrun.aws.json
          # Upload configuration files to S3
          aws s3 cp ./Dockerrun.aws.json s3://$AWS_S3_BUCKET/Dockerrun.aws.json
          
          # Create and update Elastic Beanstalk application
          aws elasticbeanstalk create-application-version \
            --application-name "$APP_NAME" \
            --version-label $APP_VERSION \
            --source-bundle S3Bucket=$AWS_S3_BUCKET,S3Key=Dockerrun.aws.json
            
          aws elasticbeanstalk update-environment \
            --application-name "$APP_NAME" \
            --version-label $APP_VERSION \
            --environment-name $APP_ENV_NAME
            
          # Wait for deployment to complete
          aws elasticbeanstalk wait environment-updated \
            --application-name "$APP_NAME" \
            --version-label $APP_VERSION \
            --environment-name $APP_ENV_NAME
      
      - name: 🔍 Verify Deployment
        run: |
          curl ${{ secrets.APP_URL }}/swagger/v1/swagger.json